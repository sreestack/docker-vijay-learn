What is Docker 
What is container
What is the difference between baremetal vs VM vs Docker ?
    https://blog.netapp.com/wp-content/uploads/2016/03/Screen-Shot-2018-03-20-at-9.24.09-AM-1024x548.png
Docker networking - Bridge,Host,None
How Docker Works
How Container works
How to handle Container and Images
Port Mapping (firewalld is must)
if I want to run one service in Linux OS what is required?
If I go with below then what will be the utilization percentage?
Baremetal  hypervisor  VM1
CENTOS  Docker Engine
5.	In one baremetal setup how container is working?
6.	In Container how the CLI (any command) communicating with docker engine (JINO Diagram)
https://github.com/bvijaycom/docker-jino/blob/master/installtion.svg
7.	How one container getting launched https://github.com/bvijaycom/docker-jino/blob/master/Docker.svg
8.	If I issue command (docker docker build ,docker pull,docker create) ,then how the flow works
https://github.com/bvijaycom/docker-jino/blob/master/container.svg
10.	What is the difference between images and containers
*************************************************************************************************
Docker Installation in UBUNTU

sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

sudo gpasswd -a gopavarapunaresh docker (without adding rajeshcnl61 user to docker group,we cant run any command without sudo)
   
*************************************************************************************************

Docker Installation in CENTOS

sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2

sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo


sudo yum install docker-ce docker-ce-cli containerd.io

sudo systemctl start docker

sudo systemctl enable docker

sudo gpasswd -a rajeshcnl61 docker (without adding rajeshcnl61 user to docker group,we cant run any command without sudo)
*************************************************************************************************
to see the docker version

docker --version

16.	How to identify official images from docker hub
docker search centos
13.	How to run the image?
docker run centos

now this will be exited state.check docker ps -a command

so now you open the docker linux machine in 2 different putty window.

run the below command in one window 
docker run -it centos bash

in another window do the following command

docker ps -a

see now the container is in running state.

***********************************************************

docker run -dit nginx

now you run docker ps -a command.You wil see up status.

-d is background interactive

*****************************

now i want to login the already running containers

docker ps -a

see which container is running

docker exec -it 9abcc2cfa22e bash

9abcc2cfa22e --> Container ID
*************************************************************************

14.	How to inspect running or exited containers?
docker ps -a
15.	How to pull the docker image?
docker pull centos
15.	How to see current images?
docker images
17.	How run the instant commands directly to one image
docker run busybox ping google.com
18.	Run ping command in 2 image and explain the difference
a.	Download httpd image and run ping command
docker run httpd ping google.com
b.	Download busybox image and run ping command
docker run busybox ping google.com

********************************************************************
publish webserver ngnix in port 80

docker container run --publish 80:80 nginx

*********************************************************
publish webserver ngnix in port 80 --> run in background permanently

docker container run --publish 80:80 --detach nginx

*********************************************************

inspect image

docker image inspect nginx

*******************************************************

inspect container

docker container inspect 9abcc2cfa22e

9abcc2cfa22e--> container id

******************************************************

remove:
  - all stopped containers
  - all networks not used by at least one container
  - all dangling images
  - all dangling build cache
  
  
  docker system prune
  
  ********************************************************************************************
  To set the name of the docker machine
  
  docker run -d --name web httpd
  
  ****************************************************
  
  docker run -dit --name cloudnloud-web -p 8087:80 -v /var/tmp/:/usr/local/apache2/htdocs/ httpd:2.4
  
  8080 port --> base linux machine port
80 --> docker image port
/var/tmp/ --> base linux machine directory
/usr/local/apache2/htdocs/ --> docker image directory -->(goto docker hub and check it)

**************************************************
run the container and how to find out the IP address of the container

run the webserver and through that container IP address how to reterive using curl command

docker run -d --name nginxvijay nginx
docker ps
docker exec -it nginxvijay bash

reference ---->   https://hub.docker.com/_/nginx

reference ---->   document root - /usr/share/nginx/html/

echo “hi how are you” > /usr/share/nginx/html/index.html
docker inspect nginxvijay
**************************************************************************
dynamic port selection (automatic port selection)

docker run -d -P --name web httpd

-P --> dynamic port selection (automatic port selection)

docker ps -a

to test ----> http://35.224.243.205:32769/

**************************************************************************************************************

Containers logs can be stored in base docker engine machine
/var/lib/containerd/logs/

*****************************************************
To stop any running container

docker stop $(docker ps -q)  

*********************************************************
To remove all the containers

docker rm $(docker ps -a -q)

*********************************

To remove all docker images in a single command,
[root@docker-host ~]# docker rmi $(docker images -a -q)

*********************************************************************

what is dangling images

*************************************************************

Remove all exited containers
You can locate containers using docker ps -a and filter them by their status: created, restarting, running, paused, or exited. To review the list of exited containers, use the -f flag to filter based on status. When you've verified you want to remove those containers, using -q to pass the IDs to the docker rm command.

List:

docker ps -a -f status=exited

Remove:

docker rm $(docker ps -a -f status=exited -q)

Remove containers using more than one filter
Docker filters can be combined by repeating the filter flag with an additional value. This results in a list of containers that meet either condition. For example, if you want to delete all containers marked as either Created (a state which can result when you run a container with an invalid command) or Exited, you can use two filters:


List:

docker ps -a -f status=exited -f status=created

Remove:

docker rm $(docker ps -a -f status=exited -f status=created -q)

Remove containers according to a pattern
You can find all the containers that match a pattern using a combination of docker ps and grep. When you're satisfied that you have the list you want to delete, you can use awk and xargs to supply the ID to docker rmi. Note that these utilities are not supplied by Docker and not necessarily available on all systems:

List:

docker ps -a |  grep "pattern”

Remove:

docker ps -a | grep "pattern" | awk '{print $3}' | xargs docker rmi

Stop and remove all containers
You can review the containers on your system with docker ps. Adding the -a flag will show all containers. When you're sure you want to delete them, you can add the -q flag to supply the IDs to the docker stop and docker rm commands:

List:

docker ps -a
Remove:

docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

Remove a container and its volume
If you created an unnamed volume, it can be deleted at the same time as the container with the -v flag. Note that this only works with unnamed volumes. When the container is successfully removed, its ID is displayed. Note that no reference is made to the removal of the volume. If it is unnamed, it is silently removed from the system. If it is named, it silently stays present.

Remove:

docker rm -v container_name

to see the container statistics

docker stats 71207cb18cae

******************************************************************************************************************************
to see the docker master image history

docker history <imageid>

**************************************************
volume

docker volume create vineeth
docker volume inspect vineeth
docker volume ls

default location of volumes --> /var/lib/docker/volumes/


docker run --name vineeweb -v vineeth:/usr/local/apache2/htdocs/ -p 8089:80 httpd:2.4 

docker volume prune
*******************************************************************************************
Docker file 1

FROM ubuntu:latest
RUN apt update
RUN apt install -y nginx
ADD index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

*******************************************************

docker build -t bvijaycom/cloud_local:latest .    
docker login 

docker push bvijaycom/cloud_local:latest

*************************************

Complete Image push automation via DevOps CI/CD


https://github.com/bvijaycom/parthatest

if there is error while building the image ,the push wont happen in the image repository hub.docker.com

**************************************************************************************************************************

How to manually commit docker images from docker container

docker pull centos
docker run -ti centos bash
now you are inside that container
 from inside container now do the following
 
 yum install httpd -y
 
 [root@c0d27abd1cf1 /]# cd /var/www/html
[root@c0d27abd1cf1 html]# ls
[root@c0d27abd1cf1 html]# echo "vijay manual commit" > index.html

 Login the same machine from another putty window and do the following

docker commit -c 'CMD ["/usr/sbin/httpd","-D","FOREGROUND"]' c0d27abd1cf1

c0d27abd1cf1 --> container ID

the above commit command will take the snapshot from running container c0d27abd1cf1

now run 

docker images

**************************************************************

Docker Compose


#########################################3
how to install docker compose


sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose version

#############################################

save the below in docker-compose.yaml

version: "2"
services:
  webserver:
    image: nginx
    container_name: inx
    hostname: jino
    ports:
      - "80:80"
    volumes:
      - ./data:/usr/share/nginx/html/
      
Another ex:

more docker-compose.yaml 

version: "2"
services:
  webserver:
    image: httpd
    container_name: htt
    hostname: sree
    ports:
      - "8098:80"
    volumes:
      - /data:/usr/local/apache2/htdocs
      

create data directory and create index.html


docker-compose up -d 

then 

http://35.222.106.158:8098/  - exam

get the container IP address and curl -i <container ipaddress>

***********************************************************

goto https://cloud.canister.io website

create account and activate it

create repsitory called cloud

docker login --username=bvijaycom --password=XXXXXXX cloud.canister.io:5000

now you will be logged into canister repository

now we will build the new image

docker pull centos
docker run -dit centos

docker ps -a--> get the contianer id

docker exec -it 9f65dd0718fa bash

yum install httpd net-tools vsftpd
echo "vijay" > /var/www/html/index.html

systemctl enable httpd
systemctl enable vsftpd

now come out and take that running container snapshot

docker commit -c 'CMD ["/usr/sbin/httpd","-D","FOREGROUND"]' 9f65dd0718fa

now run docker images command and you will see one <none> image.

docker tag 9eb486eaf79e cloud.canister.io:5000/bvijaycom/cloud:latest

docker push cloud.canister.io:5000/bvijaycom/cloud

now delete all images.

pull the new image and 
